# extends <ntriples.ebnf>

turtleDoc             ::= statement*
statement             ::= directive | triples '.'
directive             ::= prefixID | base | sparqlPrefix | sparqlBase
prefixID              ::= '@prefix' PNAME_NS IRIREF '.'
base                  ::= '@base' IRIREF '.'
sparqlBase            ::= "BASE" IRIREF
sparqlPrefix          ::= "PREFIX" PNAME_NS IRIREF
triples               ::= subject predicateObjectList | blankNodePropertyList predicateObjectList?
predicateObjectList   ::= verb objectList (';' (verb objectList)?)*
objectList            ::= object (',' object)*
verb                  ::= predicate | 'a'
subject               ::= iri | BlankNode | collection
predicate             ::= iri
object                ::= iri | BlankNode | collection | blankNodePropertyList | literal
literal               ::= RDFLiteral | NumericLiteral | BooleanLiteral
blankNodePropertyList ::= '[' predicateObjectList ']'
collection            ::= '(' object* ')'
NumericLiteral        ::= INTEGER | DECIMAL | DOUBLE
RDFLiteral            ::= String (LANGTAG | '^^' iri)?
BooleanLiteral        ::= 'true' | 'false'
String                ::= STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
iri                   ::= IRIREF | PrefixedName
PrefixedName          ::= PNAME_LN | PNAME_NS
BlankNode             ::= BLANK_NODE_LABEL | ANON

PNAME_NS                         ::= PN_PREFIX? ':'
PNAME_LN                         ::= PNAME_NS PN_LOCAL
INTEGER                          ::= [+-]? [0-9]+
DECIMAL                          ::= [+-]? [0-9]* '.' [0-9]+
DOUBLE                           ::= [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
EXPONENT                         ::= [eE] [+-]? [0-9]+
STRING_LITERAL_SINGLE_QUOTE      ::= "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
STRING_LITERAL_LONG_SINGLE_QUOTE ::= "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
STRING_LITERAL_LONG_QUOTE        ::= '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
WS                               ::= #x20 | #x9 | #xD | #xA /* #x20=space #x9=character tabulation #xD=carriage return #xA=new line */
ANON                             ::= '[' WS* ']'
PN_PREFIX                        ::= PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
PN_LOCAL                         ::= (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
PLX                              ::= PERCENT | PN_LOCAL_ESC
PERCENT                          ::= '%' HEX HEX
PN_LOCAL_ESC                     ::= '\' ('_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%')