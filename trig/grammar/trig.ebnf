trigDoc               ::= (directive | block)*
block                 ::= triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
triplesOrGraph        ::= labelOrSubject (wrappedGraph | predicateObjectList '.')
triples2              ::= blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
wrappedGraph          ::= '{' triplesBlock? '}'
triplesBlock          ::= triples ('.' triplesBlock?)?
labelOrSubject        ::= iri | BlankNode
directive             ::= prefixID | base | sparqlPrefix | sparqlBase
prefixID              ::= '@prefix' PNAME_NS IRIREF '.'
base                  ::= '@base' IRIREF '.'
sparqlPrefix          ::= "PREFIX" PNAME_NS IRIREF
sparqlBase            ::= "BASE" IRIREF
triples               ::= subject predicateObjectList | blankNodePropertyList predicateObjectList?
predicateObjectList   ::= verb objectList (';' (verb objectList)?)*
objectList            ::= object (',' object)*
verb                  ::= predicate | 'a'
subject               ::= iri | blank
predicate             ::= iri
object                ::= iri | blank | blankNodePropertyList | literal
literal               ::= RDFLiteral | NumericLiteral | BooleanLiteral
blank                 ::= BlankNode | collection
blankNodePropertyList ::= '[' predicateObjectList ']'
collection            ::= '(' object* ')'
NumericLiteral        ::= INTEGER | DECIMAL | DOUBLE
RDFLiteral            ::= String (LANGTAG | '^^' iri)?
BooleanLiteral        ::= 'true' | 'false'
String                ::= STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
iri                   ::= IRIREF | PrefixedName
PrefixedName          ::= PNAME_LN | PNAME_NS
BlankNode             ::= BLANK_NODE_LABEL | ANON

IRIREF                           ::= '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>'
PNAME_NS                         ::= PN_PREFIX? ':'
PNAME_LN                         ::= PNAME_NS PN_LOCAL
BLANK_NODE_LABEL                 ::= '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
LANGTAG                          ::= '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
INTEGER                          ::= [+-]? [0-9]+
DECIMAL                          ::= [+-]? ([0-9]* '.' [0-9]+)
DOUBLE                           ::= [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
EXPONENT                         ::= [eE] [+-]? [0-9]+
STRING_LITERAL_QUOTE             ::= '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"'
STRING_LITERAL_SINGLE_QUOTE      ::= "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'"
STRING_LITERAL_LONG_SINGLE_QUOTE ::= "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
STRING_LITERAL_LONG_QUOTE        ::= '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
UCHAR                            ::= '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
ECHAR                            ::= '\' [tbnrf"'\]
NIL                              ::= '(' WS* ')'
WS                               ::= #x20 | #x9 | #xD | #xA
ANON                             ::= '[' WS* ']'
PN_CHARS_BASE                    ::= [A-Z] | [a-z] | [#00C0-#00D6] | [#00D8-#00F6] | [#00F8-#02FF] | [#0370-#037D] | [#037F-#1FFF] | [#200C-#200D] | [#2070-#218F] | [#2C00-#2FEF] | [#3001-#D7FF] | [#F900-#FDCF] | [#FDF0-#FFFD] | [#10000-#EFFFF]
PN_CHARS_U                       ::= PN_CHARS_BASE | '_'
PN_CHARS                         ::= PN_CHARS_U | '-' | [0-9] | #00B7 | [#0300-#036F] | [#203F-#2040]
PN_PREFIX                        ::= PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
PN_LOCAL                         ::= (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
PLX                              ::= PERCENT | PN_LOCAL_ESC
PERCENT                          ::= '%' HEX HEX
HEX                              ::= [0-9] | [A-F] | [a-f]
PN_LOCAL_ESC                     ::= '\' ('_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%')
